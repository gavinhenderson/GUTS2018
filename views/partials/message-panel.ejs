<script src="/js/messages.js"></script>
<script src="/js/timer.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
  crossorigin="anonymous"></script>
<script src="./js/watson-speech.min.js"></script>
<title>Document</title>
<script type="text/javascript" src="//media.twiliocdn.com/sdk/js/client/v1.3/twilio.min.js"></script>
<script>
  window.onload = () => {
    const messageList = new MessageList("messages");
    messageList.setCaller({
      name: "Caller"
    });
    messageList.setOperator({
      name: "Operator"
    });

    let endpoint = '/token';

    $(function () {
      $.ajax(endpoint)
        .done(function (token) {
          console.log('Got a token: ', token);

          Twilio.Device.setup(token);
        })
        .fail(function () {
          alert('Could not authenticate!');
        });
    });


    let conn;
    Twilio.Device.connect(function (connection) {
      conn = connection;
    });



    /* Call a customer from a support ticket */
    function callCustomer(phoneNumber) {
      var params = {
        "phoneNumber": phoneNumber
      };
      Twilio.Device.connect(params);
    }

    Twilio.Device.ready(function (device) {
      console.log('Ready');
    });

    Twilio.Device.error(function (error) {
      console.log('Error: ' + error.message);
      console.log(error);
    });

    Twilio.Device.incoming(function (conn) {
      alert('Incoming connection from ' + conn.parameters.From);
      // accept the incoming connection and start two-way audio
      conn.accept();

      transcribe(conn.parameters.From);
    });

    function transcribe(phoneNumber) {
      fetch('/watson/credentials')
        .then(function (response) {
          return response.text();
        }).then(function (token) {
          var stream = WatsonSpeech.SpeechToText.recognizeMicrophone({
            token: JSON.parse(token).token,
            object_mode: true,
            interim_results: true,
            mediaStream: conn.mediaStream.video.captureStream(),
            model: 'en-GB_NarrowbandModel'
          });

          stream.setEncoding('utf8'); // get text instead of Buffers for on data events

          stream.on('data', function (data) {
            messageList.addMessage('Caller', data);
          });

          stream.on('message', function (data) {
            console.log(data);
          });

          stream.on('error', function (err) {
            console.log(err);
          });

          var stream2 = WatsonSpeech.SpeechToText.recognizeMicrophone({
            token: JSON.parse(token).token,
            object_mode: true,
            interim_results: true,
          });

          stream2.setEncoding('utf8'); // get text instead of Buffers for on data events

          stream2.on('data', function (data) {
            messageList.addMessage('Operator', data);
          });

          stream2.on('message', function (data) {
            console.log(data);
          });

          stream2.on('error', function (err) {
            console.log(err);
          });

        }).catch(function (error) {
          console.log(error);
        });
    }

  }
</script>
<div class="message-panel">
  <div class="message-container">
    <div class="message-sticker">
      <div class="messages"></div>
    </div>
  </div>
  <div class="timer">Call in progress:
    <span class="time-left">00:00</span>
  </div>
  <button class="hang-up-button">Hang up</button>
  <button class="hold-button">Hold</button>
</div>