<script>
  let messagePanel;
  let conn;

   setInterval(function(){
     
    $.ajax('/queue/')
      .done(function (data) {
        document.querySelector('.queueSize').innerHTML = data.currentSize;
        document.querySelector('.waitTime').innerHTML = data.averageWaitTime;

      });

   }, 10000);

  window.onload = () => {
    messagePanel = new MessagePanel();
    
    messagePanel.setCaller({
      name: "Caller"
    });
    messagePanel.setOperator({
      name: "Operator"
    });

    let endpoint = '/token/' + '<%- user.clientName %>';

    $(function () {
      $.ajax(endpoint)
        .done(function (token) {

          Twilio.Device.setup(token);
        })
        .fail(function () {
          alert('Could not authenticate!');
        });
    });


    Twilio.Device.connect(function (connection) {
      conn = connection;
    });

    /* Call a customer from a support ticket */
    function callCustomer(phoneNumber) {
      var params = {
        "phoneNumber": phoneNumber
      };
      Twilio.Device.connect(params);
    }

    Twilio.Device.ready(function (device) {
    });

    Twilio.Device.error(function (error) {
      console.log('Error: ' + error.message);
    });

    Twilio.Device.incoming(function (conn) {
      // accept the incoming connection and start two-way audio
      conn.accept();

      transcribe(conn);
    });

    function takeNextCall() {
      $.ajax('/connect/' + '<%- user.clientName %>')
        .done(function (text) {
          console.log(text);
          if(text === 'Empty Queue') {
            alert('Queue is currently empty');
          }
        })
        .fail(function () {
          alert('Could not connect!');
        });
    }

    function transcribe(conn) {
      const phoneNumber = conn.parameters.From;
      fetch('/watson/credentials')
        .then(function (response) {
          return response.text();
        }).then(function (token) {
          var running = true;
          var stream = WatsonSpeech.SpeechToText.recognizeMicrophone({
            token: JSON.parse(token).token,
            object_mode: true,
            interim_results: true,
            mediaStream: conn.mediaStream.video.captureStream(),
            model: 'en-GB_NarrowbandModel'
          });

          stream.setEncoding('utf8'); // get text instead of Buffers for on data events

          stream.on('data', function (data) {
            if(running){
              messagePanel.addMessage('caller', data);
              fetch('/registerNewMessage', {
                method: 'POST',
                body: JSON.stringify({ message: data }),
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
              })
              .then(function(response) {
                return response.json()
              }).then(function(entities) {
                entities.forEach(entity => {
                  highlight(entity);
                });
              });
            }
          });

          var stream2 = WatsonSpeech.SpeechToText.recognizeMicrophone({
            token: JSON.parse(token).token,
            object_mode: true,
            interim_results: true,
          });

          stream2.setEncoding('utf8'); // get text instead of Buffers for on data events

          stream2.on('data', function (data) {
            if(running){
              messagePanel.addMessage('operator', data);
            }
          });


          var ondisconnect = () => {
            running = false;
            stream.stop();
            stream2.stop();
            endCall();
          };
          conn.on('disconnect', ondisconnect)
          document.querySelector('.hang-up-button').onclick = ondisconnect;
          

        }).catch(function (error) {
          console.log(error);
        });
    }

  }

  function highlight(word) {
    let html = '<span class="message-highlight">' + word + '</span>';
    document.querySelectorAll('.message-text').forEach(el => {
      if (el.innerHTML.indexOf(word) != -1) {
        let splits = el.innerHTML.split(word);
        let newHtml = '';
        for (var i = 0; i < splits.length; i++) {
          newHtml += splits[i];
          if (i != splits.length-1) newHtml += html;
        }

        el.innerHTML = newHtml;
      }
    });
  }

  function takeNextCall() {
      $.ajax('/connect/' + '<%- user.clientName %>')
        .done(function (text) {
          if(text === 'Empty Queue') {
            alert('Queue is currently empty');
            return;
          }
          messagePanel.startCall();
        })
        .fail(function () {
          alert('Could not connect!');
        });
    }

    function endCall(){
      
      conn.disconnect();
      messagePanel.endCall();
    }
</script>